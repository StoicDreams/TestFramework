# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: Alpha
  jobs:
  - job: TestFramework
    displayName: 'Build and Publish Test Framework'
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '6.x'
          checkLatest: true
      - task: UseDotNet@2
        displayName: 'Load the SDK'
        inputs:
          packageType: 'sdk'
          version: '6.x'
          includePreviewVersions: false
      - task: DotNetCoreCLI@2
        displayName: 'Restore nuget packages for Test Framework'
        inputs:
          command: 'restore'
          projects: |
            **/StoicDreams.TestFramework.csproj
            **/SampleProject.csproj
            **/StoicDreams.TestFramework.BuildTests.csproj
          includeNuGetOrg: true
      - task: DotNetCoreCLI@2
        displayName: 'Build and pack Test Framework'
        inputs:
          command: 'build'
          projects: |
            **/StoicDreams.TestFramework.csproj
            **/SampleProject.csproj
            **/StoicDreams.TestFramework.BuildTests.csproj
      - task: DotNetCoreCLI@2
        displayName: 'Run Build Tests for Test Framework'
        inputs:
          command: 'test'
          projects: '**/*TestFramework.BuildTests.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore --collect: "XPlat Code Coverage"'
          publishTestResults: true
          nobuild: true
      - script: "dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8"
        displayName: "Install ReportGenerator tool"
      - script: 'reportgenerator -reports:**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
        displayName: "Create reports"
      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage report"
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml"
      - task: Bash@3
        displayName: 'Push Test Framework package to nuget store'
        inputs:
          targetType: inline
          script: dotnet nuget push --api-key $(NugetApiKey) --skip-duplicate --source $(NugetSource) '$(Agent.BuildDirectory)\NugetPackages\StoicDreams.TestFramework.*.nupkg' > nugetpush.txt; echo $(cat nugetpush.txt)
      - task: Bash@3
        displayName: 'Echo version number.'
        inputs:
          targetType: inline
          script: pushResult=$(cat nugetpush.txt); re=".*StoicDreams\.TestFramework\.([0-9\.]+)\.nupkg.*";if [[ $pushResult =~ $re ]]; then echo ${BASH_REMATCH[1]}; fi

  - job: DelayToAllowNugetTimeToPublish
    displayName: 'Give Nuget.org time to process publishing'
    dependsOn:
    - TestFramework
    condition: succeeded()
    pool: Server
    steps:
    - task: Delay@1
      inputs:
        delayForMinutes: '5'

  - job: TestFrameworkBlazor
    displayName: 'Build and Publish Blazor Test Framework'
    dependsOn:
    - DelayToAllowNugetTimeToPublish
    condition: succeeded()
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '6.x'
          checkLatest: true
      - task: UseDotNet@2
        displayName: 'Load the SDK'
        inputs:
          packageType: 'sdk'
          version: '6.x'
          includePreviewVersions: false
      - task: DotNetCoreCLI@2
        displayName: 'Restore nuget packages'
        inputs:
          command: 'restore'
          projects: |
            **/StoicDreams.TestFramework.Blazor.csproj
            **/SampleBlazorLib.csproj
            **/StoicDreams.TestFramework.Blazor.BuildTests.csproj
          includeNuGetOrg: true
      - task: DotNetCoreCLI@2
        displayName: 'Build and pack for Test Framework Blazor'
        inputs:
          command: 'build'
          projects: |
            **/StoicDreams.TestFramework.Blazor.csproj
            **/SampleBlazorLib.csproj
            **/StoicDreams.TestFramework.Blazor.BuildTests.csproj
      - task: DotNetCoreCLI@2
        displayName: 'Run Build Tests for Test Framework Blazor'
        inputs:
          command: 'test'
          projects: '**/*TestFramework.Blazor.BuildTests.csproj'
          arguments: '--configuration $(buildConfiguration) --no-restore --collect: "XPlat Code Coverage"'
          publishTestResults: true
          nobuild: true
      - script: "dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.5.8"
        displayName: "Install ReportGenerator tool"
      - script: 'reportgenerator -reports:**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
        displayName: "Create reports"
      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage report"
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: "$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml"
      - task: Bash@3
        displayName: 'Push Test Framework Blazor package to nuget store'
        inputs:
          targetType: inline
          script: dotnet nuget push --api-key $(NugetApiKey) --skip-duplicate --source $(NugetSource) '$(Agent.BuildDirectory)\NugetPackages\StoicDreams.TestFramework.Blazor.*.nupkg' > nugetpush.txt; echo $(cat nugetpush.txt)
      - task: Bash@3
        displayName: 'Echo version number.'
        inputs:
          targetType: inline
          script: pushResult=$(cat nugetpush.txt); re=".*StoicDreams\.TestFramework\.Blazor\.([0-9\.]+)\.nupkg.*";if [[ $pushResult =~ $re ]]; then echo ${BASH_REMATCH[1]}; fi
