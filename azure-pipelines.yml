# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '6.x'
      checkLatest: true
  - task: UseDotNet@2
    displayName: 'Load the SDK'
    inputs:
      packageType: 'sdk'
      version: '6.x'
      includePreviewVersions: false
  # Restore projects independently so dependency projects are build first
  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: 'restore'
      projects:
        '**/*TestFramework.csproj'
        '**/*SampleProject.csproj'
        '**/*TestFramework.BuildTests.csproj'
      includeNuGetOrg: true
  - task: DotNetCoreCLI@2
    displayName: 'Build and pack Test Framework'
    inputs:
      command: 'build'
      projects: '**/StoicDreams.TestFramework.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Run the Unit Tests'
    inputs:
      command: 'test'
  - task: Bash@3
    displayName: 'Push Test Framework package to nuget store'
    inputs:
      targetType: inline
      script: dotnet nuget push --api-key $(NugetApiKey) --skip-duplicate --source $(NugetSource) '$(Agent.BuildDirectory)\NugetPackages\StoicDreams.TestFramework.*.nupkg' > nugetpush.txt; echo $(cat nugetpush.txt)
  - task: Bash@3
    displayName: 'Echo version number.'
    inputs:
      targetType: inline
      script: pushResult=$(cat nugetpush.txt); re=".*StoicDreams\.TestFramework\.([0-9\.]+)\.nupkg.*";if [[ $pushResult =~ $re ]]; then echo ${BASH_REMATCH[1]}; fi
  # Delay further execution to allow Nuget package time to propagate
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        Start-Sleep -Seconds 360
  # Restore projects dependent on previous package
  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: 'restore'
      projects:
        '**/*TestFramework.Blazor.csproj'
        '**/*SampleBlazorLib.csproj'
        '**/*TestFramework.Blazor.BuildTests.csproj'
      includeNuGetOrg: true
  - task: DotNetCoreCLI@2
    displayName: 'Build and pack Test Framework Blazor'
    inputs:
      command: 'build'
      projects: '**/StoicDreams.TestFramework.Blazor.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Run the Unit Tests'
    inputs:
      command: 'test'
  - task: Bash@3
    displayName: 'Push Test Framework package to nuget store'
    inputs:
      targetType: inline
      script: dotnet nuget push --api-key $(NugetApiKey) --skip-duplicate --source $(NugetSource) '$(Agent.BuildDirectory)\NugetPackages\StoicDreams.TestFramework.Blazor.*.nupkg' > nugetpush.txt; echo $(cat nugetpush.txt)
  - task: Bash@3
    displayName: 'Echo version number.'
    inputs:
      targetType: inline
      script: pushResult=$(cat nugetpush.txt); re=".*StoicDreams\.TestFramework\.Blazor\.([0-9\.]+)\.nupkg.*";if [[ $pushResult =~ $re ]]; then echo ${BASH_REMATCH[1]}; fi
